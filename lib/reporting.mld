{0 Reporting problems}

If you are looking specifically for an error code, you can skip the discussion
here: just use your browser's find function to navigate to the code of
interest.

{1 Overview}

{!Whatwhat} retrieves and integrates data from two sources: GitHub and
Forecast. These systems have been repurposed by us in order to manage our
projects and so the "true data model" (representing real-world REG projects) is
not necessarily faithfully represented by the data models of these
systems. Thus, errors, omissions, and inconsistencies may occur.

We classify problems into {i errors} and {i warnings}:
- An {i error} (E-code) occurs when the data retrieved from the data sources,
  while valid in the domain model of the data source, is not valid in the
  domain model of whatwhat and cannot be represented as a type returned by the
  library. When an error occurs, the entity causing the error is typically
  ignored thereafter, which may lead to subsequent errors or warnings.
- A {i warning} (W-code) occurs when a valid representation is possible but is
  in some way or other problematic. Warnings should result in nudges for people
  to fix the problem.
- An {i information message} is used for commentary on potential problems.
  There aren't many of these yet, because we haven't implemented them.
- A {i debug message} is information intended purely for developer usage. There
  aren't many of these either.
  
All of these are passed to the logging system, whose job is to then communicate
them to the appropriate target. Errors and warnings may arise in three places:
  + When reading the data from Forecast;
  + When reading the data from GitHub;
  + When combining the data from these two sources.

The location at which these errors appear dictates the first number in the
error code. So, for example, an issue with GitHub metadata usually has a code
of the form E2xxx or W2xxx.


{1 Reading data from Forecast}

Forecast is authoritative for people and allocations, so the most likely
sources of errors are projects. 

{2 Errors}

{b E1001} The Forecast 'project code' field (which ought to hold the GitHub
issue number X in the format [hut23-X]) is empty.

 - {i Solution:} Add the project code. Note that the title of the Forecast
   project does not need to contain this info.

{b E1002} The Forecast 'project code' field but does not have the correct
format.

 - {i Solution:} Edit the project code to conform to the format [hut23-X],
   where [X] is the GitHub issue number.

{b E1003} The email field of a person tagged with the 'REG' role on Forecast is
empty.

 - {i Solution:} Add the email. If the person is not supposed to be part of
   REG, then remove the tag from the person.
 - Note that this error can naturally occur for people who have not yet started
   (we create Forecast accounts ahead of time for new starters). In this case,
   the error can be ignored.

{b E1004} The email field of a person tagged with the 'REG' role on Forecast is
not a valid email address.

 - {i Solution:} Correct  the email. If the person is not supposed to be part of
   REG, then remove the tag from the person.
 - 'Valid' in this case means 'matching
   [^[A-Za-z0-9._%+-]+@[A-Za-z0-9.+-]+\.[A-Za-z]{2,}$]', which is not quite
   accurate (the technical definition being {{:
   https://www.rfc-editor.org/rfc/rfc5322 }RFC 5322}), but is enough to catch
   empty emails and other typos. If you have a valid email that doesn't match
   this regex, please raise an issue.

{b E1005} The project on Forecast has no client (in Forecast, a 'client' refers
to what we usually call a 'programme').

 - {i Solution:} Add the client on Forecast.
 - This occurs naturally with the built-in 'Time Off' project. If you are running [whatwhat], this error can be suppressed
   by adding the ID of the 'Time Off' project to the [ignoredForecastProjects]
   configuration variable. See the {{:
   https://github.com/alan-turing-institute/whatwhat/wiki/Secrets-and-config-file}whatwhat
   wiki} for suggested setup.

{2 Warnings}

{b W1001} The 'project tags' field (which ought to hold the finance code) is
empty. 

 - {i Solution:} Add the finance code (if known).

{b W1002} The 'project tags' field has more than one entry.

 - {i Solution:} Remove extraneous finance codes. If a project genuinely has
   two finance codes, it should be split up into two Forecast projects. (This
   will then raise a W1003.)

{b W1003} Two projects exist with the same issue number in Forecast.

 - {i Solution:} This happens naturally sometimes, e.g. when projects are split
   up into multiple components on Forecast. Ensure that this is *supposed* to
   be the case. If not, then fix it.
 - If you know for sure that this is a spurious warning, a manual exception can
   be added for specific Forecast projects; please raise an issue.

{2 Info messages}

- When ignoring a person without the 'REG' tag.
- When deleting an assignment to a person who has been removed.
- When deleting an assignment to a project that has been removed.

{2 Debug messages}
- When ignoring an archived person.


{1 Reading data from GitHub}

All error codes under this section should begin with the number 2.

GitHub is authoritative for projects but the YAML metadata block is not part of
the GitHub data model so leaves a lot of room for trouble. 

For reference, the stages of a project, in order, are presently:
- [Suggested]
- [Proposal]
- [Extra info needed]
- [Project appraisal]
- [Awaiting go/no-go]
- [Finding people]
- [Awaiting start]
- [Active]
- [Completion review]
- [Done]
- [Cancelled]
- [Rejected]

and the YAML data block has the following fields:

- [turing-project-code] {i (Should be deprecated?)}
  - Must be present
  - May be null, when the finance code is not known yet.
- [earliest-start-date]
  - Must be present
  - May be null, when there is "no earliest start date"
- [latest-start-date]
  - Must be present
  - May not be null
- [latest-end-date]
  - Must be present
  - May be null, when there is "no latest end date"
- [nominal-FTE-percent]
  - Must be present
  - Must be an integer between 0 and 100
- [max-FTE-percent]
  - Must be present
  - May be null, meaning "same as nominal"
  - If present, must be an integer between 0 and 100
- [min-FTE-percent]
  - Must be present
  - May be null, meaning "same as nominal"
  - If present, must be an integer between 0 and 100
- [FTE-months]
  - Must be present if [FTE-weeks] is not
  - Must be an integer
- [FTE-weeks]
  - Must be present if [FTE-months] is not
  - Must be an integer

{2 Errors}

A malformed YAML block halts parsing of the entire block. Possible reasons for
error are:

- {b E2001} A metadata block cannot be found at all.
- {b E2002} A metadata block was found, but is not valid YAML.
- {b E2003} An unexpected metadata field is present.
- {b E2004} A metadata field cannot be parsed because its value is invalid
  (e.g. the wrong type).
- {b E2005} A metadata field is specified more than once.
- {b E2006} Neither [FTE-months] nor [FTE-weeks] are given.
- {b E2007} Both [FTE-months] and [FTE-weeks] are given.
- {b E2008} A metadata field that cannot be null or empty is null or empty.
- {b E2009} A compulsory metadata field is not present.
- {b E2010} A project is in 'Finding People' or later, but the finance code is
  null or empty.

{2 Warnings}

- {b W2001} A project is not yet in 'Finding People' or later, but the finance
  code is null or empty.





{1 Combining data}

All error codes under this section should begin with the number 3.

Even if both the GitHub and the Forecast data appear to satisfy the domain
model, we may still have problems when they are combined.

{2 Errors}

- {b E3001} A project on Forecast has a Hut23 issue number that is not present in
  the GitHub project tracker.
- {b E3002} A project on Forecast has a finance code that is not contained in the
  list of finance codes in the GitHub metadata.

{2 Warnings}

Warnings occur when the allocations in Forecast do not match what is implied by
the GitHub metadata.

- {b W3001} A project is in "Looking for people" or later, but has no matching
  Forecast project.
- {b W3002} There are allocations to a project beyond its latest end date.
- {b W3003} There are allocations to a project before its earliest start date.
- {b W3004} The total resource allocated exceeds the FTE-weeks or FTE-months.
- {b W3005} The run-rate resource at any time is lower than min-FTE-percent or
  higher than max-FTE-percent.
- {b W3006} An individual has an allocation that is greater than 100%.
- {b W3007} The project is in the "Active" column but there are no present
  allocations on Forecast.
- {b W3008} There are allocations to a project but the project is not in the
  "Active" column.
- {b W3009} The project is past its latest start date but is not in the
  "Active" column.
- {b W3010} A Forecast user could not be matched to a user on GitHub.
- {b W3011} The project programme ('client' on Forecast, 'tags' on GitHub) could
  not be matched.
- {b W3012} The project names on Forecast and GitHub could not be matched.


{1 Reporting}

If whatwhat is run in "report" mode, it issues a report on likely
problems. These are of two kinds: problems that exist now, and problems that
will exist in the future if left uncorrected.

{2 Things that will become problems if left unattended}

- A project is active but the total allocation to the project is less than the
  FTE-weeks (within some delta)

{2 Informational messages}

- A project is within T + delta of its latest start date but there are no
  allocations
- A project is within T + delta of its latest start date but is not "Awaiting
  start"
- A project is "Awaiting start" but the total allocation is less than the
  FTE-weeks (within some delta)
- A person's allocation will be less than 100% at T + delta
- A person's allocation to a project will change within in T + delta
- A project's allocations will change within T + delta


{1 Notifications}

{b TODO}
   
The following individuals may receive messages:

    - Fallback (email): A hard-coded person if the Scheduler cannot be found

    - The Scheduler (GitHub): The people listed in the GitHub service area for
      Scheduling

    - Project Shepherd (GitHub): Anyone listed in the project GitHub issue

    - Project Team (email): Anyone allocated to the project in the next six
      months

    - Programme Shepherd (GitHub): Anyone listed in the Programme Service area

    - Programe Lead (Forecast): Anyone allocated to the Programme Service area
      in the next six months.

    - The On-Call (Forecast): The person referred to by a particular assignment
